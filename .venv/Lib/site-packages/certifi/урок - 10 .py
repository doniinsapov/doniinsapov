class Animal:
    def make_sound(self, s):
        print(s)

class Horse(Animal):
    # pass
    def galop(self):
        print('Бежит галопом')

pony = Horse()
pony.make_sound('igogo')


class Parent:
    def glaza(self):
        print('Вижу')

class Chilid(Parent):
    def chto_to_eshe(self):
        print('Ходить')


class Car:
    def __init__(self, model, color, year):
        self.model = model
        self.color = color
        self.year = year

class SuperCar(Car):
    def __init__(self, model, color, year, sponsor):
        super().__init__(model, color, year)
        self.sponsor = sponsor

clk = SuperCar('CLK', 'Silver', 1989, 'Mersedes')
print(vars(clk)) # vars вызывает все значения




# @classmetod - Dekorator

class MyClass:
    def __init__(self, value):
        self.value = value

    @classmethod
    def from_string(cls,string):
        # Берём строку и переводим в числовые значения
        return cls(int(string))

my_obj = MyClass.from_string('10')
print(type(my_obj.value))


# @property-metod izmenyat

class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.heinht = height

        # 2 usages - ?
    @property
    def area(self):
        return self.width * self.heinht

restangle = Rectangle(4, 5)
print(restangle.area) # 20 vivod

restangle.width = 6
print(restangle.area) # 30 vivod


class Worker:
    def __init__(self, name, position):
        self.name = name
        self.position = position

class HR(Worker):
    def __init__(self, name, position):
        super().__init__(name, position)

    def show_position(self, worker):
        return worker.position

Jordan = Worker('Jordan', 'Midle dev')
pavel = HR('Pavel', 'HR')
print(pavel.show_position(Jordan))


class Player:
    def __init__(self, power, speed, accuracy, stamina):
        self.power = power
        self.speed = speed
        self.accuraty = accuracy

class Forward(Player):
    def __init__(self, power, speed, accuraty, stamina):
        super().__init__(power, speed, accuraty, stamina)

    def make_goal(self):
        print('Забил гол')

class Goalkeeper(Player):
    def __init__(self, power, speed, accuraty, stamina):
        super().__init__(power, speed, accuraty, stamina)

    def save(self):
        print('Поймал мяч')

class Defender(Player):
    def __init__(self, power, speed, accuraty, stamina):
        super().__init__(power, speed, accuraty, stamina)

    def prevent_goal(self):
        print('Защитил ворота')

class Hal_Defender(Player):
    def __init__(self, power, speed, accuraty, stamina):
        super().__init__(power, speed, accuraty, stamina)

    def tackle(self):
        print('Отобрал мяч')


Player.Forward = ()
Player.Goalkeeper = ()
Player.Defender = ()
Player.Hal_Defender = ()


class Animal:

    def __init__(self, name, age, breed):
        self.name = name
        self.age = age
        self.breed = breed

class Dog(Animal):
    def __init__(self, name, age, breed, color):
        super().__init__(name, age, breed)
        self.color = color

    def bark(self):
        print(f'{self .name} лает')

class Cat(Animal):
    def __init__(self, name, age, breed, color):
        super().__init__(name, age, breed)
        self.color = color

    def purr(self):
        print(f'{self .name} мурлычит')

class Cow(Animal):
    def __init__(self, name, age, bread, color):
        super().__init__(name, age,bread)
        self.color = color

    def moos(self):
        print(f'{self .name} мууу')


dog = Dog('Lyusi', 5, 'Labrador', 'Golden')
cat = Cat('Bakcsa', 8, 'no breed', 'black and white')
cow = Cow('Mashka', 10, 'Golan', 'black and white')

print(f"Dog's name: {dog. name}, age: {dog.age}, breed: {dog.breed}, color: {dog.color}")
print(f"Cat's name: {cat. name}, age: {cat.age}, breed: {cat.breed}, color: {cat.color}")
print(f"Cow's name: {cow. name}, age: {cow.age}, breed: {cow.breed}, color: {cow.color}")

dog.bark()
cat.purr()
cow.moos()




class Vehicle:
    def __init__(self, brand, year):
        self.brand = brand
        self.year = year

    def info(self):
        return f'{self.brand} {self.year}'

class Car(Vehicle):
    def __init__(self, brand, year, turbo_engine):
        super().__init__(brand, year)
        self.turbo_engine = turbo_engine

    def info(self):
        return f'{super().info()} with {self.turbo_engine} turbo_engine'

class Motorcycle(Vehicle):
    def __init__(self, brand, year, cooling):
        super().__init__(brand, year)
        self.cooling = cooling

    def info(self):
        return f'{super().info()} with {self.cooling} cooling'

car = Car('BMW', 2018, 'Hybrid turbojet')
motorcycle = Motorcycle('HONDA', 2020, 'liquid_cooling' )

print(car.info())
print(motorcycle.info())

















